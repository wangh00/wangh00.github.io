<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mysql快速安装流程</title>
    <link href="/2024/12/30/Mysql%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/12/30/Mysql%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="网上的教程有很多，基本上大同小异。但是安装软件有时就可能因为一个细节安装失败。我也是综合了很多个教程才安装好的，所以本教程可能也不是普遍适合的。"><a href="#网上的教程有很多，基本上大同小异。但是安装软件有时就可能因为一个细节安装失败。我也是综合了很多个教程才安装好的，所以本教程可能也不是普遍适合的。" class="headerlink" title="网上的教程有很多，基本上大同小异。但是安装软件有时就可能因为一个细节安装失败。我也是综合了很多个教程才安装好的，所以本教程可能也不是普遍适合的。"></a>网上的教程有很多，基本上大同小异。但是安装软件有时就可能因为一个细节安装失败。我也是综合了很多个教程才安装好的，所以本教程可能也不是普遍适合的。</h2><p><a href="https://www.cnblogs.com/laumians-notes/p/9069498.html">源自</a></p><h3 id="1、下载zip安装包："><a href="#1、下载zip安装包：" class="headerlink" title="1、下载zip安装包："></a>1、下载zip安装包：</h3><blockquote><p>MySQL8.0 For Windows zip包下载地址：<a href="https://dev.mysql.com/downloads/file/?id=476233">https://dev.mysql.com/downloads/file/?id=476233</a></p><p>进入页面后可以不登录。后点击底部“No thanks, just start my download.”即可开始下载。</p></blockquote><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><h4 id="2-1-解压zip包到安装目录"><a href="#2-1-解压zip包到安装目录" class="headerlink" title="2.1    解压zip包到安装目录"></a>2.1    解压zip包到安装目录</h4>1<p>我的解压在了E:\software\mysql\mysql-8.0.11-winx64</p><p>解压后的文件目录</p><h4 id="2-2-配置环境变量"><a href="#2-2-配置环境变量" class="headerlink" title="2.2 配置环境变量"></a>2.2 配置环境变量</h4><p>　　　　将解压文件夹下的bin路径添加到变量值中，前后以 ; 开头结尾</p><h4 id="2-3-配置初始化的my-ini文件"><a href="#2-3-配置初始化的my-ini文件" class="headerlink" title="2.3 配置初始化的my.ini文件"></a>2.3 配置初始化的my.ini文件</h4><blockquote><p>我们发现解压后的目录并没有my.ini文件，没关系可以自行创建。在安装根目录下添加 my.ini（新建文本文件，将文件类型改为.ini），写入基本配置：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br><span class="hljs-comment"># 设置3306端口</span><br>port=3306<br><span class="hljs-comment"># 设置mysql的安装目录</span><br>basedir=E:\\software\\mysql\\mysql-8.0.11-winx64   <span class="hljs-comment"># 切记此处一定要用双斜杠\\，单斜杠我这里会出错，不过看别人的教程，有的是单斜杠。自己尝试吧</span><br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录</span><br>datadir=E:\\software\\mysql\\mysql-8.0.11-winx64\\Data   <span class="hljs-comment"># 此处同上</span><br><span class="hljs-comment"># 允许最大连接数</span><br>max_connections=200<br><span class="hljs-comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br>max_connect_errors=10<br><span class="hljs-comment"># 服务端使用的字符集默认为UTF8</span><br>character-set-server=utf8<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br>default-storage-engine=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件认证</span><br>default_authentication_plugin=mysql_native_password<br>[mysql]<br><span class="hljs-comment"># 设置mysql客户端默认字符集 </span><br>default-character-set=utf8<br><span class="hljs-comment"># 设置mysql客户端连接服务端时默认使用的端口 </span><br>port=3306 <br>default-character-set=utf8<br></code></pre></td></tr></table></figure>2<p>注意：其中的data目录不需要创建，下一步初始化工作中会自动创建。</p><h3 id="3、安装mysql"><a href="#3、安装mysql" class="headerlink" title="3、安装mysql"></a>3、安装mysql</h3><p>在安装时，必须以管理员身份运行cmd，否则在安装时会报错，会导致安装失败的情况</p>3<h4 id="3-1-初始化数据库"><a href="#3-1-初始化数据库" class="headerlink" title="3.1 初始化数据库"></a>3.1 初始化数据库</h4><p>在MySQL安装目录的 bin 目录下执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqld --initialize --console<br></code></pre></td></tr></table></figure><p>执行完成后，会打印 root 用户的初始默认密码，比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">2018-04-28T15:57:17.087519Z 0 [System] [MY-013169] [Server] C:\Program Files\MySQL\bin\mysqld.exe (mysqld 8.0.11) initializing of server <span class="hljs-keyword">in</span> progress as process 4984<br>2018-04-28T15:57:24.859249Z 5 [Note] [MY-010454] [Server] A temporary password is generated <span class="hljs-keyword">for</span> root@localhost: rI5rvf5x5G,E<br>2018-04-28T15:57:27.106660Z 0 [System] [MY-013170] [Server] C:\Program Files\MySQL\bin\mysqld.exe (mysqld 8.0.11) initializing of server has completed<br></code></pre></td></tr></table></figure><blockquote><p>注意！执行输出结果里面有一段： [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: rI5rvf5x5G,E    其中root@localhost:后面的“rI5rvf5x5G,E”就是初始密码（不含首位空格）。在没有更改密码前，需要记住这个密码，后续登录需要用到。</p></blockquote><p>要是你手贱，关快了，或者没记住，那也没事，删掉初始化的 datadir 目录，再执行一遍初始化命令，又会重新生成的。当然，也可以使用安全工具，强制改密码，用什么方法，自己随意。</p><p>参考：<a href="https://dev.mysql.com/doc/refman/8.0/en/data-directory-initialization-mysqld.html">https://dev.mysql.com/doc/refman/8.0/en/data-directory-initialization-mysqld.html</a></p><h4 id="3-2-安装服务"><a href="#3-2-安装服务" class="headerlink" title="3.2 安装服务"></a>3.2 安装服务</h4><p>在MySQL安装目录的 bin 目录下执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqld --install [服务名]<br></code></pre></td></tr></table></figure><p>后面的服务名可以不写，默认的名字为 mysql。当然，如果你的电脑上需要安装多个MySQL服务，就可以用不同的名字区分了，比如 mysql5 和 mysql8。</p><p>安装完成之后，就可以通过命令net start mysql启动MySQL的服务了。通过命令<code>net stop mysql</code>停止服务。通过<code>命令sc delete MySQL/mysqld -remove</code>卸载 MySQL 服务</p><h3 id="4、更改密码"><a href="#4、更改密码" class="headerlink" title="4、更改密码"></a>4、更改密码</h3><p>在MySQL安装目录的 bin 目录下执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -u root -p<br></code></pre></td></tr></table></figure><p>这时候会提示输入密码，记住了上面第3.1步安装时的密码，填入即可登录成功，进入MySQL命令模式。</p><p>在MySQL中执行命令：</p><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘新密码’;        </p><p>修改密码，注意命令尾的；一定要有，这是mysql的语法<br>到此，安装部署就完成了。官方说测试速度MySQL8比5快两倍。</p><p>可以用 命令查看一下默认安装的数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br>use mysql;<br>show tables;<br></code></pre></td></tr></table></figure><p>看到默认初始化了mysql数据库，其中user表里面存储MySQL用户信息。我们可以看一下默认MySQL用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select user,host,authentication_string from mysql.user;<br>+------------------+-----------+-------------------------------------------+<br>| user             | host      | authentication_string                     |<br>+------------------+-----------+-------------------------------------------+<br>| mysql.infoschema | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |<br>| mysql.session    | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |<br>| mysql.sys        | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |<br>| root             | localhost | *27C237A977F4F44D3F551F1A673BE14DFD232961 |<br>+------------------+-----------+-------------------------------------------+<br>4 rows in set (0.00 sec)<br><br></code></pre></td></tr></table></figure><p>管理员root的host是localhost，代表仅限localhost登录访问。如果要允许开放其他ip登录，则需要添加新的host。如果要允许所有ip访问，可以直接修改成“%”</p><p>创建用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE USER &#x27;xxh&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;xxh123!@#&#x27;;<br></code></pre></td></tr></table></figure><p>需要注意：mysql8.0加密方式修改了<br>检查用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select user, host, plugin, authentication_string from user\G;<br><br></code></pre></td></tr></table></figure><h3 id="授权远程数据库"><a href="#授权远程数据库" class="headerlink" title="授权远程数据库"></a>授权远程数据库</h3><blockquote><p>授权所有权限 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">GRANT ALL PRIVILEGES ON *.* TO &#x27;xxh&#x27;@&#x27;%&#x27;；<br></code></pre></td></tr></table></figure><p>授权基本的查询修改权限，按需求设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON *.* TO &#x27;xxh&#x27;@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure><p>查看用户权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show grants for &#x27;xxh&#x27;@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查看文件(或文件夹)被哪个进程使用【文件已在另一程序中打开】</title>
    <link href="/2024/12/30/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6-%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9-%E8%A2%AB%E5%93%AA%E4%B8%AA%E8%BF%9B%E7%A8%8B%E4%BD%BF%E7%94%A8%E3%80%90%E6%96%87%E4%BB%B6%E5%B7%B2%E5%9C%A8%E5%8F%A6%E4%B8%80%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%89%93%E5%BC%80%E3%80%91/"/>
    <url>/2024/12/30/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6-%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9-%E8%A2%AB%E5%93%AA%E4%B8%AA%E8%BF%9B%E7%A8%8B%E4%BD%BF%E7%94%A8%E3%80%90%E6%96%87%E4%BB%B6%E5%B7%B2%E5%9C%A8%E5%8F%A6%E4%B8%80%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%89%93%E5%BC%80%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h2 id="windows系统中当我们在删除某个文件或文件夹时有时会提示该文件有程序在使用不能被删除，这时相当惆怅。那么可以用这个方法来找到是哪个进程在占用该文件："><a href="#windows系统中当我们在删除某个文件或文件夹时有时会提示该文件有程序在使用不能被删除，这时相当惆怅。那么可以用这个方法来找到是哪个进程在占用该文件：" class="headerlink" title="windows系统中当我们在删除某个文件或文件夹时有时会提示该文件有程序在使用不能被删除，这时相当惆怅。那么可以用这个方法来找到是哪个进程在占用该文件："></a>windows系统中当我们在删除某个文件或文件夹时有时会提示该文件有程序在使用不能被删除，这时相当惆怅。那么可以用这个方法来找到是哪个进程在占用该文件：</h2><blockquote><p>1：打开任务管理器选择“性能”</p></blockquote><blockquote><p>2：单击下部的“资源监视器”    </p></blockquote><blockquote><p>3：选择“CPU”，在下部可以看到“关联的句柄”搜索框    </p></blockquote><blockquote><p>4：在该搜索框中输入要删除的文件名回车    </p></blockquote><p>在下面就会列出来占用该文件的进程名，右键该进程单击“结束进程”，OK，可以删除了:</p><img src="/2024/12/30/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6-%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9-%E8%A2%AB%E5%93%AA%E4%B8%AA%E8%BF%9B%E7%A8%8B%E4%BD%BF%E7%94%A8%E3%80%90%E6%96%87%E4%BB%B6%E5%B7%B2%E5%9C%A8%E5%8F%A6%E4%B8%80%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%89%93%E5%BC%80%E3%80%91/jinchengzhanyong.png" class="" title="进程占用"><p>注释：</p><p>（在操作系统界面上所说的）文件和文件夹，其本质在文件系统层次上都是一个文件的形式，所以问如何查看文件被哪个进程使用和问查看文件夹被哪个进程使用其实是同一个问题而已。当一个进程占用或叫打开一个文件(或文件夹)（之后便可使用（即读或写）该文件）时，便有一个文件内核对象被创建，且在该进程地址空间中存在一个该文件内核对象的句柄。上述图片中，cd zzw是表示cmd进程占用或叫打开一个叫zzw的文件夹（即读取zzw文件夹的元数据到内存），之后，若是输入查看该目录下的有哪些文件的命令则表示cmd进程读取zzw文件夹的数据，若是输入添加或是删除zzw文件夹下的文件时表示cmd进程写入zzw文件夹的数据。当一个文件要被关闭（本质上，即文件内核对象要被销毁）之前，其在各个进程地址空间中的引用（的句柄）都要被关闭才可执行文件关闭操作，所以上述图片例子里，若是你在操作系</p>]]></content>
    
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的请求库Pycurl编译流程</title>
    <link href="/2024/12/30/Python%E7%9A%84%E8%AF%B7%E6%B1%82%E5%BA%93Pycurl%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/12/30/Python%E7%9A%84%E8%AF%B7%E6%B1%82%E5%BA%93Pycurl%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="pycurl是python的用于请求的第三方库，"><a href="#pycurl是python的用于请求的第三方库，" class="headerlink" title="pycurl是python的用于请求的第三方库，"></a>pycurl是python的用于请求的第三方库，</h2><blockquote><p>1.支持http2</p><p>2.能修改ja3指纹来通过浏览器tls指纹校验</p></blockquote><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><blockquote><p>1.下载pycurl的编译包,<a href="https://alist.whyyzs.top/d/share/downloads/pycurl%E7%BC%96%E8%AF%91/pycurl.zip?sign=eeL7WEMRM0gsk7ng3cenZa4XnnZrqNgdbMfHxCGRbD0=:0">[下载链接]</a></p></blockquote><blockquote><p>2.因为pycurl底层是有c所写，需要用到visual studio 生成工具，下载链接</p></blockquote><blockquote><p>3.以2022版本为例，下载生成工具后打开”x64 Native Tools Command Prompt for VS 2022”命令行窗口</p></blockquote><blockquote><p>4.cd 到pycurl包中的 pycurl-REL_7_45_2 文件夹中(如果需要把pycurl编译在虚拟环境中，请先激活虚拟环境)，输入命令:<br>python setup.py install –curl-dir&#x3D;D:\pycurl\pycurl\lib\libcurl –use-libcurl-dll –openssl-dir&#x3D;D:\pycurl\pycurl\lib\openssl –with-openssl<br>其中路径稍作修改，替换为包中正确路径,即可编译。</p></blockquote><blockquote><p>5.如果在运行代码的时候导入pycurl报错，提示dll文件找不到，请把pycurl\lib\libcurl\bin文件夹中的libcurl.dll文件移到已经编译好的pycurl的egg文件中(pycurl-7.45.2-py3.10-win-amd64.egg中)</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript常用的Hook脚本</title>
    <link href="/2024/12/27/JavaScript%E5%B8%B8%E7%94%A8%E7%9A%84Hook%E8%84%9A%E6%9C%AC/"/>
    <url>/2024/12/27/JavaScript%E5%B8%B8%E7%94%A8%E7%9A%84Hook%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h3 id="本文Hook脚本-来自"><a href="#本文Hook脚本-来自" class="headerlink" title="本文Hook脚本 来自"></a>本文Hook脚本 来自</h3><h2 id="页面最早加载代码Hook时机"><a href="#页面最早加载代码Hook时机" class="headerlink" title="页面最早加载代码Hook时机"></a>页面最早加载代码Hook时机</h2><pre><code class="hljs">1.在source里 用dom事件断点的script断点2.然后刷新网页，就会断在第一个js标签，这时候就可以注入代码进行hook</code></pre><h3 id="监听-键盘-与-鼠标-事件"><a href="#监听-键盘-与-鼠标-事件" class="headerlink" title="监听 键盘 与 鼠标 事件"></a>监听 键盘 与 鼠标 事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 判断是否按下F12  onkeydown事件</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">提示： 与 onkeydown 事件相关联的事件触发次序:</span><br><span class="hljs-comment">onkeydown</span><br><span class="hljs-comment">onkeypress</span><br><span class="hljs-comment">onkeyup</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// F12的键码为 123，可以直接全局搜索 keyCode == 123, == 123 ,keyCode</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span> &amp;&amp; <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>.<span class="hljs-property">keyCode</span> == <span class="hljs-number">123</span>) &#123;<br>        <span class="hljs-comment">// 改变键码</span><br>        event.<span class="hljs-property">keyCode</span> = <span class="hljs-number">0</span>;<br>        event.<span class="hljs-property">returnValue</span> = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 监听到F12被按下直接关闭窗口</span><br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">close</span>();<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;about:blank&quot;</span>;<br>    &#125;<br>&#125;<br>;<br><span class="hljs-comment">// 监听鼠标右键是否被按下方法 1， oncontextmenu事件</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">oncontextmenu</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;;<br><br><span class="hljs-comment">// 监听鼠标右键是否被按下方法 2，onmousedown事件</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousedown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>)&#123;<br>    <span class="hljs-comment">// button属性是2 就代表是鼠标右键 </span><br>    <span class="hljs-keyword">if</span>(evt.<span class="hljs-property">button</span> == <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;监听到鼠标右键被按下&#x27;</span>)<br>        evt.<span class="hljs-title function_">preventDefault</span>() <span class="hljs-comment">// 该方法将通知 Web 浏览器不要执行与事件关联的默认动作</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 监听用户工具栏调起开发者工具，判断浏览器的可视高度和宽度是否有改变，有改变则处理，</span><br><span class="hljs-comment">// 判断是否开了开发者工具不太合理。</span><br><span class="hljs-keyword">var</span> h = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>, w = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;改变了窗口高度&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// hook代码</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//严谨模式 检查所有错误</span><br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-comment">// hook 鼠标选择</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">document</span>, <span class="hljs-string">&#x27;onselectstart&#x27;</span>, &#123;<br><span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hook捕获到选中设置-&gt;&#x27;</span>, val);<br><span class="hljs-keyword">return</span> val;<br>&#125;<br>      &#125;);<br><span class="hljs-comment">// hook 鼠标右键</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">document</span>,<span class="hljs-string">&#x27;oncontextmenu&#x27;</span>,&#123;<br><span class="hljs-attr">set</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;检测到右键点击&quot;</span>);<br><span class="hljs-keyword">return</span> evt<br>&#125;<br>&#125;);<br>&#125;)();<br><br><br><br></code></pre></td></tr></table></figure><h3 id="webpack-hook-半自动扣"><a href="#webpack-hook-半自动扣" class="headerlink" title="webpack hook 半自动扣"></a>webpack hook 半自动扣</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//在加载器后面下断点  执行下面代码</span><br><span class="hljs-comment">// 这里的f 替换成需要导出的函数名</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">zhiyuan</span> = f;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">wbpk_</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">isz</span> = <span class="hljs-literal">false</span>;<br>f = <span class="hljs-keyword">function</span>(<span class="hljs-params">r</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">isz</span>)<br>&#123;<br>        <span class="hljs-comment">// e[r]里的e 是加载器里的call那里</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">wbpk_</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">wbpk_</span> + r.<span class="hljs-title function_">toString</span>()+<span class="hljs-string">&quot;:&quot;</span>+(e[r]+<span class="hljs-string">&quot;&quot;</span>)+ <span class="hljs-string">&quot;,&quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">zhiyuan</span>(r);<br>&#125;<br><br><span class="hljs-comment">//在你要的方法加载前下断点 执行 window.isz=true</span><br><span class="hljs-comment">//在你要的方法运行后代码处下断点  执行 window.wbpk_  拿到所有代码  注意后面有个逗号</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">o</span>(<span class="hljs-params">t</span>) &#123;<br><br>    <span class="hljs-keyword">if</span> (n[t])<br>        <span class="hljs-keyword">return</span> n[t].<span class="hljs-property">exports</span>;<br>    <span class="hljs-keyword">var</span> i = n[t] = &#123;<br>        <span class="hljs-attr">i</span>: t,<br>        <span class="hljs-attr">l</span>: !<span class="hljs-number">1</span>,<br>        <span class="hljs-attr">exports</span>: &#123;&#125;<br>    &#125;;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;被调用的 &gt;&gt;&gt; &quot;</span>, e[t].<span class="hljs-title function_">toString</span>());<br>    <span class="hljs-comment">//  这里进行拼接，bb变量需要在全局定义一下 </span><br>    <span class="hljs-comment">// t 是模块名， e[t] 是模块对应的函数， 也就是key：value形式</span><br>    bb += <span class="hljs-string">`&quot;<span class="hljs-subst">$&#123;t&#125;</span>&quot;:<span class="hljs-subst">$&#123;e[t].toString()&#125;</span>,`</span><br>    <span class="hljs-keyword">return</span> e[t].<span class="hljs-title function_">call</span>(i.<span class="hljs-property">exports</span>, i, i.<span class="hljs-property">exports</span>, o),<br>    i.<span class="hljs-property">l</span> = !<span class="hljs-number">0</span>,<br>    i.<span class="hljs-property">exports</span><br>&#125;<br>bz = o;<br>如果只是调用模块，不用模块里面的方法, 那么直接获取调用模块的时候所有加载过的模块，进行拼接<br></code></pre></td></tr></table></figure><h3 id="document下的createElement-方法的hook-查看创建了什么元素"><a href="#document下的createElement-方法的hook-查看创建了什么元素" class="headerlink" title="document下的createElement()方法的hook,查看创建了什么元素"></a>document下的createElement()方法的hook,查看创建了什么元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span><br>   <span class="hljs-keyword">var</span> _createElement = <span class="hljs-variable language_">document</span>.<span class="hljs-property">createElement</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">document</span>);<br>   <span class="hljs-variable language_">document</span>.<span class="hljs-property">createElement</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">elm</span>)&#123;<br>   <span class="hljs-comment">// 这里做判断 是否创建了script这个元素    </span><br>   <span class="hljs-keyword">if</span>(elm == <span class="hljs-string">&#x27;body&#x27;</span>)&#123;<br>        <span class="hljs-keyword">debugger</span>;<br>   &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">_createElement</span>(elm);<br>&#125;<br>&#125;)();<br>之前我不知道我用的是 <span class="hljs-keyword">var</span> _createElement = <span class="hljs-variable language_">document</span>.<span class="hljs-property">createElement</span> 导致一直报错 <span class="hljs-title class_">Uncaught</span> <span class="hljs-title class_">TypeError</span>: <span class="hljs-title class_">Illegal</span> invocation<br>原来是需要绑定一下对象 <span class="hljs-keyword">var</span> _createElement = <span class="hljs-variable language_">document</span>.<span class="hljs-property">createElement</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">document</span>);<br></code></pre></td></tr></table></figure><h3 id="headers-hook-当header中包含Authorization时，则插入断点"><a href="#headers-hook-当header中包含Authorization时，则插入断点" class="headerlink" title="headers hook 当header中包含Authorization时，则插入断点"></a>headers hook 当header中包含Authorization时，则插入断点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">var</span> code = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> org = <span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setRequestHeader</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setRequestHeader</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">key,value</span>)&#123;<br>    <span class="hljs-keyword">if</span>(key==<span class="hljs-string">&#x27;Authorization&#x27;</span>)&#123;<br>        <span class="hljs-keyword">debugger</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> org.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">arguments</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>script.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;(&#x27;</span> + code + <span class="hljs-string">&#x27;)()&#x27;</span>;<br>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">appendChild</span>(script);<br>script.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(script);<br><br></code></pre></td></tr></table></figure><h3 id="请求hook-当请求的url里包含MmEwMD时，则插入断点"><a href="#请求hook-当请求的url里包含MmEwMD时，则插入断点" class="headerlink" title="请求hook 当请求的url里包含MmEwMD时，则插入断点"></a>请求hook 当请求的url里包含MmEwMD时，则插入断点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><span class="hljs-keyword">var</span> code = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> open = <span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">open</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">open</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">method, url, <span class="hljs-keyword">async</span></span>)&#123;<br>    <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;MmEwMD&quot;</span>)&gt;-<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">debugger</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> open.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>&#125;;<br>&#125;<br><span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>script.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;(&#x27;</span> + code + <span class="hljs-string">&#x27;)()&#x27;</span>;<br>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">appendChild</span>(script);<br>script.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(script);<br><br></code></pre></td></tr></table></figure><h3 id="docuemnt-getElementById-以及value属性的hook"><a href="#docuemnt-getElementById-以及value属性的hook" class="headerlink" title="docuemnt.getElementById 以及value属性的hook#"></a>docuemnt.getElementById 以及value属性的hook#</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><span class="hljs-comment">// docuemnt.getElementById 以及value属性的hook,可以参考完成innerHTML的hook</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">getElementById</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-keyword">var</span> value = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#&#x27;</span> + id).<span class="hljs-property">value</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;DOM操作 id: &#x27;</span>, id)<br>    <span class="hljs-keyword">try</span> &#123;<br><br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#&#x27;</span>+ id), <span class="hljs-string">&#x27;value&#x27;</span>, &#123;<br>            <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getting -&#x27;</span>, id, <span class="hljs-string">&#x27;value -&#x27;</span>, value);<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;,<br>            <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setting -&#x27;</span>, id, <span class="hljs-string">&#x27;value -&#x27;</span>, val)<br>                value = val;<br>            &#125;<br>        &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---------华丽的分割线--------&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#&#x27;</span> + id);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="过debugger-阿布牛逼"><a href="#过debugger-阿布牛逼" class="headerlink" title="过debugger 阿布牛逼"></a>过debugger 阿布牛逼</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Closure</span>(<span class="hljs-params">injectFunction</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>)<br>            <span class="hljs-keyword">return</span> injectFunction.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        <span class="hljs-variable language_">arguments</span>[<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] = <span class="hljs-variable language_">arguments</span>[<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/debugger/g</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span> injectFunction.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> oldFunctionConstructor = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Closure</span>(oldFunctionConstructor)<br><span class="hljs-comment">//fix native function</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>.<span class="hljs-property">toString</span> = oldFunctionConstructor.<span class="hljs-property">toString</span>.<span class="hljs-title function_">bind</span>(oldFunctionConstructor);<br><br><span class="hljs-keyword">var</span> oldFunction = <span class="hljs-title class_">Function</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">Function</span> = <span class="hljs-title class_">Closure</span>(oldFunction)<br><span class="hljs-comment">//fix native function</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">Function</span>.<span class="hljs-property">toString</span> = oldFunction.<span class="hljs-property">toString</span>.<span class="hljs-title function_">bind</span>(oldFunction);<br><br><span class="hljs-keyword">var</span> oldEval = <span class="hljs-built_in">eval</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">eval</span> = <span class="hljs-title class_">Closure</span>(oldEval)<br><span class="hljs-comment">//fix native function</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">eval</span>.<span class="hljs-property">toString</span> = oldEval.<span class="hljs-property">toString</span>.<span class="hljs-title function_">bind</span>(oldEval);<br><br><span class="hljs-comment">// hook GeneratorFunction</span><br><span class="hljs-keyword">var</span> oldGeneratorFunctionConstructor = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(<span class="hljs-keyword">function</span>*() &#123;&#125;).<span class="hljs-property">constructor</span><br><span class="hljs-keyword">var</span> newGeneratorFunctionConstructor = <span class="hljs-title class_">Closure</span>(oldGeneratorFunctionConstructor)<br>newGeneratorFunctionConstructor.<span class="hljs-property">toString</span> = oldGeneratorFunctionConstructor.<span class="hljs-property">toString</span>.<span class="hljs-title function_">bind</span>(oldGeneratorFunctionConstructor);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(oldGeneratorFunctionConstructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&quot;constructor&quot;</span>, &#123;<br>    <span class="hljs-attr">value</span>: newGeneratorFunctionConstructor,<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span><br>&#125;)<br><br><span class="hljs-comment">// hook Async Function</span><br><span class="hljs-keyword">var</span> oldAsyncFunctionConstructor = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;).<span class="hljs-property">constructor</span><br><span class="hljs-keyword">var</span> newAsyncFunctionConstructor = <span class="hljs-title class_">Closure</span>(oldAsyncFunctionConstructor)<br>newAsyncFunctionConstructor.<span class="hljs-property">toString</span> = oldAsyncFunctionConstructor.<span class="hljs-property">toString</span>.<span class="hljs-title function_">bind</span>(oldAsyncFunctionConstructor);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(oldAsyncFunctionConstructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&quot;constructor&quot;</span>, &#123;<br>    <span class="hljs-attr">value</span>: newAsyncFunctionConstructor,<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span><br>&#125;)<br><br><span class="hljs-comment">// hook dom</span><br><span class="hljs-keyword">var</span> oldSetAttribute = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setAttribute</span>;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setAttribute</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">name, value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value == <span class="hljs-string">&quot;string&quot;</span>)<br>        value = value.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/debugger/g</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-comment">// 向上调用</span><br>    oldSetAttribute.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name, value)<br>&#125;<br>;<br><span class="hljs-keyword">var</span> oldContentWindow = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(<span class="hljs-title class_">HTMLIFrameElement</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&quot;contentWindow&quot;</span>).<span class="hljs-property">get</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">HTMLIFrameElement</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&quot;contentWindow&quot;</span>, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> newV = oldContentWindow.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>        <span class="hljs-keyword">if</span> (!newV.<span class="hljs-property">inject</span>) &#123;<br>            newV.<span class="hljs-property">inject</span> = <span class="hljs-literal">true</span>;<br>            core.<span class="hljs-title function_">call</span>(newV, globalConfig, newV);<br>        &#125;<br>        <span class="hljs-keyword">return</span> newV<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="过debugger—1-constructor-构造器构造出来的"><a href="#过debugger—1-constructor-构造器构造出来的" class="headerlink" title="过debugger—1 constructor 构造器构造出来的"></a>过debugger—1 constructor 构造器构造出来的</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><span class="hljs-keyword">var</span> _constructor = constructor;<br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) &#123;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;debugger&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">_constructor</span>(s);<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h3 id="过debugger—2-eval的"><a href="#过debugger—2-eval的" class="headerlink" title="过debugger—2 eval的"></a>过debugger—2 eval的</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-keyword">var</span> eval_ = <span class="hljs-variable language_">window</span>.<span class="hljs-property">eval</span>;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">eval</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>        <span class="hljs-title function_">eval_</span>(x.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;debugger;&quot;</span>, <span class="hljs-string">&quot;  ; &quot;</span>));<br>    &#125;<br>    ;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">eval</span>.<span class="hljs-property">toString</span> = eval_.<span class="hljs-property">toString</span>;<br>&#125;<br>)();<br><br><br><br></code></pre></td></tr></table></figure><h3 id="JSON-HOOK"><a href="#JSON-HOOK" class="headerlink" title="JSON HOOK"></a>JSON HOOK</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">var</span> my_stringify = <span class="hljs-title class_">JSON</span>.<span class="hljs-property">stringify</span>;<br><span class="hljs-title class_">JSON</span>.<span class="hljs-property">stringify</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-comment">//这里可以添加其他逻辑比如 debugger</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;json_stringify params:&quot;</span>,params);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">my_stringify</span>(params);<br>&#125;;<br><br><span class="hljs-keyword">var</span> my_parse = <span class="hljs-title class_">JSON</span>.<span class="hljs-property">parse</span>;<br><span class="hljs-title class_">JSON</span>.<span class="hljs-property">parse</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-comment">//这里可以添加其他逻辑比如 debugger</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;json_parse params:&quot;</span>,params);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">my_parse</span>(params);<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><h3 id="对象属性hook-属性自定义"><a href="#对象属性hook-属性自定义" class="headerlink" title="对象属性hook 属性自定义"></a>对象属性hook 属性自定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 严格模式，检查所有错误</span><br>    <span class="hljs-string">&#x27;use strict&#x27;</span><br>    <span class="hljs-comment">// document 为要hook的对象 ,属性是cookie</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">document</span>,<span class="hljs-string">&#x27;cookie&#x27;</span>,&#123;<br>        <span class="hljs-comment">// hook set方法也就是赋值的方法，get就是获取的方法</span><br>        <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)&#123;<br>            <span class="hljs-comment">// 这样就可以快速给下面这个代码行下断点，从而快速定位设置cookie的代码</span><br>            <span class="hljs-keyword">debugger</span>;  <span class="hljs-comment">// 在此处自动断下</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hook捕获到set-cookie -&gt;&#x27;</span>,val);<br>            <span class="hljs-keyword">return</span> val;<br>        &#125;<br>    &#125;)<br>&#125;)();<br><br><br></code></pre></td></tr></table></figure><h3 id="cookies-1-（不是万能的-有些时候hook不到-自己插入debugger）"><a href="#cookies-1-（不是万能的-有些时候hook不到-自己插入debugger）" class="headerlink" title="cookies - 1 （不是万能的 有些时候hook不到 自己插入debugger）"></a>cookies - 1 （不是万能的 有些时候hook不到 自己插入debugger）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><span class="hljs-keyword">var</span> cookie_cache = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">document</span>, <span class="hljs-string">&#x27;cookie&#x27;</span>, &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Getting cookie&#x27;</span>);<br>        <span class="hljs-keyword">return</span> cookie_cache;<br>    &#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Seting cookie&quot;</span>,val);<br>        <span class="hljs-keyword">var</span> cookie = val.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>)[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">var</span> ncookie = cookie.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>        <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">var</span> cache = cookie_cache.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;; &quot;</span>);<br>        cache = cache.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)&#123;<br>            <span class="hljs-keyword">if</span> (a.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">0</span>] === ncookie[<span class="hljs-number">0</span>])&#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">return</span> cookie;<br>            &#125;<br>            <span class="hljs-keyword">return</span> a;<br>        &#125;)<br>    &#125;<br>&#125;)<br><br><br></code></pre></td></tr></table></figure><h3 id="cookies-2"><a href="#cookies-2" class="headerlink" title="cookies - 2"></a>cookies - 2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><br><span class="hljs-keyword">var</span> code = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> org = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">__lookupSetter__</span>(<span class="hljs-string">&#x27;cookie&#x27;</span>);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">__defineSetter__</span>(<span class="hljs-string">&quot;cookie&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">cookie</span>)&#123;<br>        <span class="hljs-keyword">if</span>(cookie.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;TSdc75a61a&#x27;</span>)&gt;-<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">debugger</span>;<br>        &#125;<br>        org = cookie;<br>    &#125;);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">__defineGetter__</span>(<span class="hljs-string">&quot;cookie&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> org;&#125;);<br>&#125;<br><span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>script.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;(&#x27;</span> + code + <span class="hljs-string">&#x27;)()&#x27;</span>;<br>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">appendChild</span>(script);<br>script.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(script);<br><br><span class="hljs-comment">// 当cookie中匹配到了  TSdc75a61a， 则插入断点。</span><br><br><br></code></pre></td></tr></table></figure><h3 id="window-attr"><a href="#window-attr" class="headerlink" title="window attr"></a>window attr</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><br><span class="hljs-comment">// 定义hook属性</span><br><span class="hljs-keyword">var</span> window_flag_1 = <span class="hljs-string">&quot;_t&quot;</span>;<br><span class="hljs-keyword">var</span> window_flag_2 = <span class="hljs-string">&quot;ccc&quot;</span>;<br><br><span class="hljs-keyword">var</span> key_value_map = &#123;&#125;;<br><span class="hljs-keyword">var</span> window_value = <span class="hljs-variable language_">window</span>[window_flag_1];<br><br><span class="hljs-comment">// hook</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">window</span>, window_flag_1, &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Getting&quot;</span>,<span class="hljs-variable language_">window</span>,window_flag_1,<span class="hljs-string">&quot;=&quot;</span>,window_value);<br>        <span class="hljs-comment">//debugger</span><br>        <span class="hljs-keyword">return</span> window_value<br>    &#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Setting&quot;</span>,<span class="hljs-variable language_">window</span>, window_flag_1, <span class="hljs-string">&quot;=&quot;</span>,val);<br>        <span class="hljs-comment">//debugger</span><br>        window_value = val;<br>        key_value_map[<span class="hljs-variable language_">window</span>[window_flag_1]] = window_flag_1;<br>        <span class="hljs-title function_">set_obj_attr</span>(<span class="hljs-variable language_">window</span>[window_flag_1],window_flag_2);<br>    &#125;,<br><br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">set_obj_attr</span>(<span class="hljs-params">obj,attr</span>)&#123;<br>    <span class="hljs-keyword">var</span> obj_attr_value = obj[attr];<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj,attr, &#123;<br>        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Getting&quot;</span>, key_value_map[obj],attr, <span class="hljs-string">&quot;=&quot;</span>, obj_attr_value);<br>            <span class="hljs-comment">//debugger</span><br>            <span class="hljs-keyword">return</span> obj_attr_value;<br>        &#125;,<br>        <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Setting&quot;</span>, key_value_map[obj], attr, <span class="hljs-string">&quot;=&quot;</span>, val);<br>            <span class="hljs-comment">//debugger</span><br>            obj_attr_value = val;<br>        &#125;,<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="eval-Function"><a href="#eval-Function" class="headerlink" title="eval&#x2F;Function"></a>eval&#x2F;Function</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">__cr_eval</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">eval</span>;<br><span class="hljs-keyword">var</span> myeval = <span class="hljs-keyword">function</span>(<span class="hljs-params">src</span>) &#123;<br>    <span class="hljs-comment">// src就是eval运行后 最终返回的值</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(src);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;========= eval end ===========&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">__cr_eval</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> _myeval = myeval.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>);<br>_myeval.<span class="hljs-property">toString</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">__cr_eval</span>.<span class="hljs-property">toString</span>;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-string">&#x27;eval&#x27;</span>,&#123;<span class="hljs-attr">value</span>: _myeval&#125;);<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">_cr_fun</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Function</span><br><span class="hljs-keyword">var</span> myfun = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>), src = <span class="hljs-variable language_">arguments</span>[<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">lenght</span> -<span class="hljs-number">1</span>];<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(src);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;======== Function end =============&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">_cr_fun</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>&#125;<br><br>myfun.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">_cr_fun</span> + <span class="hljs-string">&quot;&quot;</span>&#125; <span class="hljs-comment">//小花招，这里防止代码里检测原生函数</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-string">&quot;Function&quot;</span>,&#123;<span class="hljs-attr">value</span>: myfun&#125;)<br><br><br></code></pre></td></tr></table></figure><h3 id="eval-取返回值"><a href="#eval-取返回值" class="headerlink" title="eval 取返回值"></a>eval 取返回值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br>_eval = <span class="hljs-built_in">eval</span>;<br><span class="hljs-built_in">eval</span> = <span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>    res1 = res <span class="hljs-comment">// 返回值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">_eval</span>(res)<br>&#125;<br><br><span class="hljs-built_in">eval</span>(xxxxxxxxx)<br><br><br></code></pre></td></tr></table></figure><h3 id="eval-proxy代理-https-segmentfault-com-a-1190000025154230"><a href="#eval-proxy代理-https-segmentfault-com-a-1190000025154230" class="headerlink" title="eval proxy代理 https://segmentfault.com/a/1190000025154230"></a>eval proxy代理 <a href="https://segmentfault.com/a/1190000025154230">https://segmentfault.com/a/1190000025154230</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><span class="hljs-comment">// 代理eval</span><br><span class="hljs-built_in">eval</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<span class="hljs-built_in">eval</span>,&#123;<br>    <span class="hljs-comment">// 如果代理的是函数 查看调用 就用apply属性</span><br>    <span class="hljs-comment">// 第二个参数是prop 这里用不上 因为是属性，eval只是个函数 所以prop为undefind 这里设置了下划线 ——</span><br>    <span class="hljs-attr">apply</span>: <span class="hljs-function">(<span class="hljs-params">target,_,arg</span>)=&gt;</span>&#123;<br>        <span class="hljs-comment">// target 是被代理的函数或对象名称，当前是[Function: eval]</span><br>        <span class="hljs-comment">// arg是传进来的参数,返回的是个列表</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg[<span class="hljs-number">0</span>])<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">//  eval执行的时候就会被代理拦截</span><br><span class="hljs-comment">// 传入的如果是字符串 那么只会返回字符串，这里是匿名函数 直接执行 return了内容</span><br><span class="hljs-built_in">eval</span>(<br>    (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是包子 自己执行了&quot;</span>&#125;)()<br>)<br><br><span class="hljs-comment">// 结果 ： 我是包子 自己执行了</span><br><br><br><br></code></pre></td></tr></table></figure><h3 id="websocket-hook"><a href="#websocket-hook" class="headerlink" title="websocket hook"></a>websocket hook</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br> <span class="hljs-comment">// 1、webcoket 一般都是json数据格式传输，那么发生之前需要JSON.stringify  </span><br><span class="hljs-keyword">var</span> my_stringify = <span class="hljs-title class_">JSON</span>.<span class="hljs-property">stringify</span>;<br><span class="hljs-title class_">JSON</span>.<span class="hljs-property">stringify</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-comment">//这里可以添加其他逻辑比如 debugger</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;json_stringify params:&quot;</span>,params);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">my_stringify</span>(params);<br>&#125;;<br><br><span class="hljs-keyword">var</span> my_parse = <span class="hljs-title class_">JSON</span>.<span class="hljs-property">parse</span>;<br><span class="hljs-title class_">JSON</span>.<span class="hljs-property">parse</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-comment">//这里可以添加其他逻辑比如 debugger</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;json_parse params:&quot;</span>,params);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">my_parse</span>(params);<br>&#125;;<br><br><span class="hljs-comment">// 2  webScoket 绑定在windows对象，上，根据浏览器的不同，websokcet名字可能不一样 </span><br><span class="hljs-comment">//chrome window.WebSocket  firfox window.MozWebSocket;</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">_WebSocket</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">WebSocket</span>;<br><br><span class="hljs-comment">// hook send</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">_WebSocket</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">send</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;Hook WebSocket&quot;</span>, data);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">send</span>(data)<br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-string">&quot;WebSocket&quot;</span>,&#123;<span class="hljs-attr">value</span>: <span class="hljs-title class_">WebSocket</span>&#125;)<br><br><br><br></code></pre></td></tr></table></figure><h3 id="hook-正则-——-1"><a href="#hook-正则-——-1" class="headerlink" title="hook 正则 —— 1"></a>hook 正则 —— 1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br>(<span class="hljs-keyword">function</span>  (<span class="hljs-params"></span>)  &#123;<br>        <span class="hljs-keyword">var</span>  _RegExp  =  <span class="hljs-title class_">RegExp</span>;<br>        <span class="hljs-title class_">RegExp</span>  =  <span class="hljs-keyword">function</span>  (<span class="hljs-params">pattern,  modifiers</span>)  &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Some  codes  are  setting  regexp&quot;</span>);<br>                <span class="hljs-keyword">debugger</span>;<br>                <span class="hljs-keyword">if</span>  (modifiers)  &#123;<br>                        <span class="hljs-keyword">return</span>  <span class="hljs-title function_">_RegExp</span>(pattern,  modifiers);<br>                &#125;  <span class="hljs-keyword">else</span>  &#123;<br>                        <span class="hljs-keyword">return</span>  <span class="hljs-title function_">_RegExp</span>(pattern);<br>                &#125;<br>        &#125;;<br>        <span class="hljs-title class_">RegExp</span>.<span class="hljs-property">toString</span>  =  <span class="hljs-keyword">function</span>  (<span class="hljs-params"></span>)  &#123;<br>                <span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;function  setInterval()  &#123;  [native  code]  &#125;&quot;</span><br>        &#125;;<br>&#125;)();<br><br><br><br></code></pre></td></tr></table></figure><h3 id="hook-正则-2-加在sojson头部过字符串格式化检测"><a href="#hook-正则-2-加在sojson头部过字符串格式化检测" class="headerlink" title="hook 正则 2 加在sojson头部过字符串格式化检测"></a>hook 正则 2 加在sojson头部过字符串格式化检测</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> _RegExp = <span class="hljs-title class_">RegExp</span>;<br>    <span class="hljs-title class_">RegExp</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">pattern, modifiers</span>) &#123;<br>        <span class="hljs-keyword">if</span> (pattern == <span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-string">&quot;%5Cw%2B%20*%5C(%5C)%20*%7B%5Cw%2B%20*%5B&#x27;%7C%22%5D.%2B%5B&#x27;%7C%22%5D%3B%3F%20*%7D&quot;</span>) || pattern == <span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-string">&quot;function%20*%5C(%20*%5C)&quot;</span>) || pattern == <span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-string">&quot;%5C%2B%5C%2B%20*(%3F%3A_0x(%3F%3A%5Ba-f0-9%5D)%7B4%2C6%7D%7C(%3F%3A%5Cb%7C%5Cd)%5Ba-z0-9%5D%7B1%2C4%7D(%3F%3A%5Cb%7C%5Cd))&quot;</span>) || pattern == <span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-string">&quot;(%5C%5C%5Bx%7Cu%5D(%5Cw)%7B2%2C4%7D)%2B&quot;</span>)) &#123;<br>            pattern = <span class="hljs-string">&#x27;.*?&#x27;</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;发现sojson检测特征，已帮您处理。&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (modifiers) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;疑似最后一个检测...已帮您处理。&quot;</span>)<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;已通过全部检测，请手动处理debugger后尽情调试吧！&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">_RegExp</span>(pattern, modifiers);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">_RegExp</span>(pattern);<br>        &#125;<br>    &#125;<br>    ;<br>    <span class="hljs-title class_">RegExp</span>.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> _RegExp.<span class="hljs-title function_">toString</span>();<br>    &#125;<br>    ;<br>&#125;<br>)();<br><br><br><br></code></pre></td></tr></table></figure><h3 id="hook-canvas-定位图片生成的地方"><a href="#hook-canvas-定位图片生成的地方" class="headerlink" title="hook canvas (定位图片生成的地方)"></a>hook canvas (定位图片生成的地方)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-keyword">let</span> create_element = <span class="hljs-variable language_">document</span>.<span class="hljs-property">createElement</span>.<span class="hljs-title function_">bind</span>(doument);<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">createElement</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">_element</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;create_element:&quot;</span>,_element);<br>        <span class="hljs-keyword">if</span> (_element === <span class="hljs-string">&quot;canvas&quot;</span>) &#123;<br>            <span class="hljs-keyword">debugger</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">create_element</span>(_element);<br>    &#125;<br>&#125;)();<br><br></code></pre></td></tr></table></figure><h3 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval 定时器"></a>setInterval 定时器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    setInterval_ = <span class="hljs-built_in">setInterval</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;原函数已被重命名为setInterval_&quot;</span>)<br>    <span class="hljs-built_in">setInterval</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    ;<br>    <span class="hljs-built_in">setInterval</span>.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;有函数正在检测setInterval是否被hook&quot;</span>);<br>        <span class="hljs-keyword">return</span> setInterval_.<span class="hljs-title function_">toString</span>();<br>    &#125;<br>    ;<br>&#125;<br>)();<br><br><br><br></code></pre></td></tr></table></figure><h3 id="setInterval-循环清除定时器"><a href="#setInterval-循环清除定时器" class="headerlink" title="setInterval 循环清除定时器"></a>setInterval 循环清除定时器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9999999</span>; i++) <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(i)<br><br><br></code></pre></td></tr></table></figure><h3 id="console-log-检测例子-（不让你输出调试）"><a href="#console-log-检测例子-（不让你输出调试）" class="headerlink" title="console.log 检测例子 （不让你输出调试）"></a>console.log 检测例子 （不让你输出调试）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><span class="hljs-keyword">var</span> oldConsole = [<span class="hljs-string">&quot;debug&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;log&quot;</span>, <span class="hljs-string">&quot;warn&quot;</span>, <span class="hljs-string">&quot;dir&quot;</span>, <span class="hljs-string">&quot;dirxml&quot;</span>, <span class="hljs-string">&quot;table&quot;</span>, <span class="hljs-string">&quot;trace&quot;</span>, <span class="hljs-string">&quot;group&quot;</span>, <span class="hljs-string">&quot;groupCollapsed&quot;</span>, <span class="hljs-string">&quot;groupEnd&quot;</span>, <span class="hljs-string">&quot;clear&quot;</span>, <span class="hljs-string">&quot;count&quot;</span>, <span class="hljs-string">&quot;countReset&quot;</span>, <span class="hljs-string">&quot;assert&quot;</span>, <span class="hljs-string">&quot;profile&quot;</span>, <span class="hljs-string">&quot;profileEnd&quot;</span>, <span class="hljs-string">&quot;time&quot;</span>, <span class="hljs-string">&quot;timeLog&quot;</span>, <span class="hljs-string">&quot;timeEnd&quot;</span>, <span class="hljs-string">&quot;timeStamp&quot;</span>, <span class="hljs-string">&quot;context&quot;</span>, <span class="hljs-string">&quot;memory&quot;</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">key</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">var</span> old = <span class="hljs-variable language_">console</span>[key];<br>    <span class="hljs-variable language_">console</span>[key] = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    ;<br>    <span class="hljs-variable language_">console</span>[key].<span class="hljs-property">toString</span> = old.<span class="hljs-property">toString</span>.<span class="hljs-title function_">bind</span>(old)<br>    <span class="hljs-keyword">return</span> old;<br>&#125;<br>)<br><br></code></pre></td></tr></table></figure><h3 id="检测函数是否被hook例子"><a href="#检测函数是否被hook例子" class="headerlink" title="检测函数是否被hook例子"></a>检测函数是否被hook例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">eval</span> == <span class="hljs-string">&#x27;native code&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;发现eval函数被hook了 开始死循环&#x27;</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="模拟sleep函数-实现Date的时间增加"><a href="#模拟sleep函数-实现Date的时间增加" class="headerlink" title="模拟sleep函数,实现Date的时间增加"></a>模拟sleep函数,实现Date的时间增加</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><span class="hljs-keyword">var</span> saf, saf_class;<br>!<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> v = <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span><br>      , n = <span class="hljs-title class_">Function</span><br>      , t = <span class="hljs-string">&quot;prototype&quot;</span><br>      , e = <span class="hljs-string">&quot;toString&quot;</span><br>      , o = n[e]<br>      , i = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;(&quot;</span>.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;)_&quot;</span>, (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() + <span class="hljs-string">&quot;&quot;</span>)[e](<span class="hljs-number">36</span>)))<br>      , c = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;function&quot;</span> == <span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> &amp;&amp; <span class="hljs-variable language_">this</span>[i] || o.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (n) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">v</span>(<span class="hljs-string">&quot;[ERROR toString]&quot;</span>, <span class="hljs-variable language_">this</span> + <span class="hljs-string">&#x27;&#x27;</span>),<br>            <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">r</span>(<span class="hljs-params">n, t, e</span>) &#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(n, t, &#123;<br>            <span class="hljs-attr">enumerable</span>: !<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">configurable</span>: !<span class="hljs-number">0</span>,<br>            <span class="hljs-attr">writable</span>: !<span class="hljs-number">0</span>,<br>            <span class="hljs-attr">value</span>: e<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">delete</span> n[t][e],<br>    <span class="hljs-title function_">r</span>(n[t], e, c),<br>    <span class="hljs-title function_">r</span>(n[t][e], i, <span class="hljs-string">&quot;function toString() &#123; [native code] &#125;&quot;</span>),<br>    saf = <span class="hljs-keyword">function</span>(<span class="hljs-params">n, m</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">r</span>(n, i, <span class="hljs-string">`function <span class="hljs-subst">$&#123;m ? m : n.name || <span class="hljs-string">&quot;&quot;</span>&#125;</span>() &#123; [native code] &#125;`</span>),<br>        n;<br>    &#125;<br>    ;<br>&#125;();<br><br><span class="hljs-keyword">var</span> v_Date = <span class="hljs-title class_">Date</span><br><span class="hljs-keyword">var</span> sleep_number = <span class="hljs-number">0</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">number</span>) &#123;<br>    sleep_number += number;<br>    <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">_Date</span>) &#123;<br>        <span class="hljs-keyword">var</span> bind = <span class="hljs-title class_">Function</span>.<span class="hljs-property">bind</span>;<br>        <span class="hljs-keyword">var</span> unbind = bind.<span class="hljs-title function_">bind</span>(bind);<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">instantiate</span>(<span class="hljs-params">constructor, args</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">new</span> (<span class="hljs-title function_">unbind</span>(constructor, <span class="hljs-literal">null</span>).<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, args));<br>        &#125;<br>        <span class="hljs-keyword">var</span> names = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(_Date);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; names.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (names[i]<span class="hljs-keyword">in</span> <span class="hljs-title class_">Date</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">var</span> desc = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(_Date, names[i]);<br>            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Date</span>, names[i], desc);<br>        &#125;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">Date</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> date = <span class="hljs-title function_">instantiate</span>(_Date, [v_Date.<span class="hljs-title function_">now</span>() + sleep_number]);<br>            <span class="hljs-comment">// 固定返回某一个时间点</span><br>            <span class="hljs-keyword">return</span> date;<br>        &#125;<br>        <span class="hljs-title class_">Date</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = _Date.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">saf</span>(<span class="hljs-title class_">Date</span>);<br>    &#125;(v_Date);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="hook-Array-concat"><a href="#hook-Array-concat" class="headerlink" title="hook Array.concat"></a>hook Array.concat</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><span class="hljs-title class_">BaseArrayConcat</span> = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">concat</span><br><br>hook_concat = <span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;concat-hook:&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(a))<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-title class_">BaseArrayConcat</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, a);<br>    result.<span class="hljs-property">concat</span> = hook_concat;<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br>ce.<span class="hljs-property">concat</span> = hook_concat<br><br><br><br></code></pre></td></tr></table></figure><h3 id="控制台检测"><a href="#控制台检测" class="headerlink" title="控制台检测"></a>控制台检测</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><br><span class="hljs-keyword">var</span> _0x383ee0 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-keyword">var</span> _0x465be6 = <span class="hljs-number">0</span>;<br><br>_0x383ee0[<span class="hljs-string">&quot;toString&quot;</span>] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  _0x465be6++;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>])<br>  <span class="hljs-keyword">if</span> (_0x465be6 == <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  &#125;<br>&#125;;<br><br><span class="hljs-variable language_">console</span>[<span class="hljs-string">&quot;log&quot;</span>](_0x383ee0);<br><br><br></code></pre></td></tr></table></figure><h3 id="…"><a href="#…" class="headerlink" title="…."></a>….</h3><h3 id="来源-https-www-cnblogs-com-xiaoweigege-p-14954648-html"><a href="#来源-https-www-cnblogs-com-xiaoweigege-p-14954648-html" class="headerlink" title="来源:https://www.cnblogs.com/xiaoweigege/p/14954648.html"></a>来源:<a href="https://www.cnblogs.com/xiaoweigege/p/14954648.html">https://www.cnblogs.com/xiaoweigege/p/14954648.html</a></h3>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某花顺cookie的v值以及整个登录流程逆向（附源码）</title>
    <link href="/2024/12/13/%E6%9F%90%E8%8A%B1%E9%A1%BAcookie%E7%9A%84v%E5%80%BC%E4%BB%A5%E5%8F%8A%E6%95%B4%E4%B8%AA%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B%E9%80%86%E5%90%91%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89/"/>
    <url>/2024/12/13/%E6%9F%90%E8%8A%B1%E9%A1%BAcookie%E7%9A%84v%E5%80%BC%E4%BB%A5%E5%8F%8A%E6%95%B4%E4%B8%AA%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B%E9%80%86%E5%90%91%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="在学习登录接口的时候，网上有高手已经把流程梳理得很清晰了，原帖-登录流程梳理"><a href="#在学习登录接口的时候，网上有高手已经把流程梳理得很清晰了，原帖-登录流程梳理" class="headerlink" title="在学习登录接口的时候，网上有高手已经把流程梳理得很清晰了，原帖&gt;&gt; 登录流程梳理"></a>在学习登录接口的时候，网上有高手已经把流程梳理得很清晰了，原帖&gt;&gt; <a href="https://blog.csdn.net/qq_44906798/article/details/139812098">登录流程梳理</a></h3><h3 id="我也是弄完了才发现这个帖子的，我再在这个贴子的基础上进行更新一下。"><a href="#我也是弄完了才发现这个帖子的，我再在这个贴子的基础上进行更新一下。" class="headerlink" title="我也是弄完了才发现这个帖子的，我再在这个贴子的基础上进行更新一下。"></a>我也是弄完了才发现这个帖子的，我再在这个贴子的基础上进行更新一下。</h3><h3 id="网站的所有请求基本上都会携带一个v值，这是需要每次请求新生成的，"><a href="#网站的所有请求基本上都会携带一个v值，这是需要每次请求新生成的，" class="headerlink" title="网站的所有请求基本上都会携带一个v值，这是需要每次请求新生成的，"></a>网站的所有请求基本上都会携带一个v值，这是需要每次请求新生成的，</h3><h3 id="断点打在脚本上，刷新即可查看生成v值的cookie，全扣下来，稍微补几个环境即可，源码最下面"><a href="#断点打在脚本上，刷新即可查看生成v值的cookie，全扣下来，稍微补几个环境即可，源码最下面" class="headerlink" title="断点打在脚本上，刷新即可查看生成v值的cookie，全扣下来，稍微补几个环境即可，源码最下面."></a>断点打在脚本上，刷新即可查看生成v值的cookie，全扣下来，稍微补几个环境即可，源码最下面.</h3><img src="/2024/12/13/%E6%9F%90%E8%8A%B1%E9%A1%BAcookie%E7%9A%84v%E5%80%BC%E4%BB%A5%E5%8F%8A%E6%95%B4%E4%B8%AA%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B%E9%80%86%E5%90%91%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89/v.png" class="" title="加密"><h3 id="然后就是登录的流程注意事项"><a href="#然后就是登录的流程注意事项" class="headerlink" title="然后就是登录的流程注意事项"></a>然后就是登录的流程注意事项</h3><img src="/2024/12/13/%E6%9F%90%E8%8A%B1%E9%A1%BAcookie%E7%9A%84v%E5%80%BC%E4%BB%A5%E5%8F%8A%E6%95%B4%E4%B8%AA%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B%E9%80%86%E5%90%91%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89/liucheng.png" class="" title="加密"><h3 id="请求的时候每次都生成新的v值携带上"><a href="#请求的时候每次都生成新的v值携带上" class="headerlink" title="请求的时候每次都生成新的v值携带上"></a>请求的时候每次都生成新的v值携带上</h3><img src="/2024/12/13/%E6%9F%90%E8%8A%B1%E9%A1%BAcookie%E7%9A%84v%E5%80%BC%E4%BB%A5%E5%8F%8A%E6%95%B4%E4%B8%AA%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B%E9%80%86%E5%90%91%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89/result.png" class="" title="加密"><h3 id="代码中对滑块验证失败的情况做了重新滑一次的操作，流程还是比较多的，不过代码没有混淆，难度并不高"><a href="#代码中对滑块验证失败的情况做了重新滑一次的操作，流程还是比较多的，不过代码没有混淆，难度并不高" class="headerlink" title="代码中对滑块验证失败的情况做了重新滑一次的操作，流程还是比较多的，不过代码没有混淆，难度并不高"></a>代码中对滑块验证失败的情况做了重新滑一次的操作，流程还是比较多的，不过代码没有混淆，难度并不高</h3><h3 id="至于加密的地方，由于没有混淆，直接搜加密参数名都能直接搜到，稍微复杂一点的加密就是"><a href="#至于加密的地方，由于没有混淆，直接搜加密参数名都能直接搜到，稍微复杂一点的加密就是" class="headerlink" title="至于加密的地方，由于没有混淆，直接搜加密参数名都能直接搜到，稍微复杂一点的加密就是"></a>至于加密的地方，由于没有混淆，直接搜加密参数名都能直接搜到，稍微复杂一点的加密就是</h3><p>dologinreturnjson2接口中的passwdSalt参数,各种加密套加密，用到的部分加密：</p><blockquote><p> (1)sha256(crnd+dsk)    （crud是随机数,dsk是getGS中的返回值）</p></blockquote><blockquote><p>(2) hamc_sha256</p></blockquote><blockquote><p>(3)md5，base64      </p></blockquote><img src="/2024/12/13/%E6%9F%90%E8%8A%B1%E9%A1%BAcookie%E7%9A%84v%E5%80%BC%E4%BB%A5%E5%8F%8A%E6%95%B4%E4%B8%AA%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B%E9%80%86%E5%90%91%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%89/jiami.png" class="" title="加密"><h3 id="部分源码在github-源码"><a href="#部分源码在github-源码" class="headerlink" title="部分源码在github,源码"></a>部分源码在github,<a href="https://github.com/wangh00/10jqka_login">源码</a></h3>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>JS逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某度旋转验证码逆向分析流程和源码</title>
    <link href="/2024/07/24/%E6%9F%90%E5%BA%A6%E6%97%8B%E8%BD%AC%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B%E5%92%8C%E6%BA%90%E7%A0%81/"/>
    <url>/2024/07/24/%E6%9F%90%E5%BA%A6%E6%97%8B%E8%BD%AC%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B%E5%92%8C%E6%BA%90%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>第一次 <a href="https://passport.baidu.com/cap/init">https://passport.baidu.com/cap/init</a> 接口，请求的 ak 是固定值，当然不同场景不同网站是不一样的，_ 时间戳，ver&#x3D;1，返回值 as、tk 都是后面会用到的。</p><p>请求 <a href="https://passport.baidu.com/cap/style">https://passport.baidu.com/cap/style</a> 接口，会用到tk值，得到验证码图片</p><p>使用到的加密方法:AES,MD5,SHA1,SHA3(魔改了tostring)</p><p>逻辑:</p><p>1.首先请求init和style获取参数和图片信息</p><p>2.下载图片并获取旋转角度(网上找个开源旋转验证码模型)</p><p>3.fuid每个设备都是固定的参数 </p><p>4.fs需要加密两次，两次都是AES，第二次需要用第一次的加密参数和图片的backstr(style接口返回)</p><p>5.使用init和style参数请求log接口返回op&#x3D;1即表示通过验证</p><p>ac_c&#x3D;angle *238 &#x2F; 360 ，可能会不定时改变</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>截止 2024-7-24：并未校验验证码轨迹，随便模拟一个就行,校验了旋转的角度参数ac_c</p><p>截止 2024-8-6：验证码增加了校验参数</p><img src="/2024/07/24/%E6%9F%90%E5%BA%A6%E6%97%8B%E8%BD%AC%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B%E5%92%8C%E6%BA%90%E7%A0%81/result.png" class="" title="返回成功结果">]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>JS逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
